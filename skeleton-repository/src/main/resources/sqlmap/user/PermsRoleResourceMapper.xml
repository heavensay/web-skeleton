<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.www.skeleton.repository.mapper.user.PermsRoleResourceMapper" >
        <resultMap id="BaseResultMap" type="com.www.skeleton.repository.po.user.PermsRoleResource" >

        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="role_id" property="roleId" jdbcType="INTEGER" />
        <result column="resource_id" property="resourceId" jdbcType="INTEGER" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        </resultMap>
    <sql id="Example_Where_Clause" >
        <where >
            <foreach collection="oredCriteria" item="criteria" separator="or" >
                <if test="criteria.valid" >
                    <trim prefix="(" suffix=")" prefixOverrides="and" >
                        <foreach collection="criteria.criteria" item="criterion" >
                            <choose >
                                <when test="criterion.noValue" >
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue" >
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue" >
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue" >
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause" >
        <where >
            <foreach collection="example.oredCriteria" item="criteria" separator="or" >
                <if test="criteria.valid" >
                    <trim prefix="(" suffix=")" prefixOverrides="and" >
                        <foreach collection="criteria.criteria" item="criterion" >
                            <choose >
                                <when test="criterion.noValue" >
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue" >
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue" >
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue" >
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List" >
     id,
          role_id,
          resource_id,
          update_time,
          create_time     
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.www.skeleton.repository.po.user.PermsRoleResourceExample" >
        select
        <if test="distinct" >
            distinct
        </if>
        <include refid="Base_Column_List" />
            from perms_role_resource
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null" >
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select
        <include refid="Base_Column_List" />
        from perms_role_resource
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
        delete from perms_role_resource
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.www.skeleton.repository.po.user.PermsRoleResourceExample" >
        delete from perms_role_resource
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
    </delete>
                     <insert id="insert" parameterType="com.www.skeleton.repository.po.user.PermsRoleResource" useGeneratedKeys="true" keyProperty="id" >
           insert into perms_role_resource (
                          role_id,
                                     resource_id,
                                     update_time,
                                     create_time           )

           values (
                          #{roleId,jdbcType=INTEGER},
                                     #{resourceId,jdbcType=INTEGER},
                                     #{updateTime,jdbcType=TIMESTAMP},
                                     #{createTime,jdbcType=TIMESTAMP}                      )
       </insert>
       <insert id="insertSelective" parameterType="com.www.skeleton.repository.po.user.PermsRoleResource" useGeneratedKeys="true" keyProperty="id" >
           insert into perms_role_resource
           <trim prefix="(" suffix=")" suffixOverrides="," >
                                  <if test="roleId != null" >
                       role_id,
                   </if>
                                  <if test="resourceId != null" >
                       resource_id,
                   </if>
                                  <if test="updateTime != null" >
                       update_time,
                   </if>
                                  <if test="createTime != null" >
                       create_time,
                   </if>
                          </trim>
           <trim prefix="values (" suffix=")" suffixOverrides="," >
                                  <if test="roleId != null" >
                       #{roleId,jdbcType=INTEGER},
                   </if>
                                  <if test="resourceId != null" >
                       #{resourceId,jdbcType=INTEGER},
                   </if>
                                  <if test="updateTime != null" >
                       #{updateTime,jdbcType=TIMESTAMP},
                   </if>
                                  <if test="createTime != null" >
                       #{createTime,jdbcType=TIMESTAMP},
                   </if>
                          </trim>

       </insert>

       <insert id="insertBatch" parameterType="java.util.List" >
           insert into perms_role_resource (
                          role_id,
                                     resource_id,
                                     update_time,
                                     create_time                      )
           values
           <foreach collection="list" item="item" index="index" separator="," >
               (
                                  #{item.roleId,jdbcType=INTEGER},
                                                 #{item.resourceId,jdbcType=INTEGER},
                                                 #{item.updateTime,jdbcType=TIMESTAMP},
                                                 #{item.createTime,jdbcType=TIMESTAMP}               
               )
           </foreach>
       </insert>
   
    <select id="countByExample" parameterType="com.www.skeleton.repository.po.user.PermsRoleResourceExample" resultType="java.lang.Integer" >
        select count(*) from perms_role_resource
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
    </select>

    <select id="countGroupByExample" parameterType="Map" resultType="Map" >
        select
        <foreach collection="groupByFields" item="item" index="index" separator="," >
            ${item}
        </foreach>
        ,
        <foreach collection="sumFields" item="item" index="index" separator="," >
            count(${item}) as ${item}
        </foreach>
        from perms_role_resource
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
        group by
        <foreach collection="groupByFields" item="item" index="index" separator="," >
            ${item}
        </foreach>
    </select>



    <select id="sumByExample" parameterType="Map" resultType="Map" >
        select
        <foreach collection="groupByFields" item="item" index="index" separator="," >
            ${item}
        </foreach>
        ,
        <foreach collection="sumFields" item="item" index="index" separator="," >
            sum(${item}) as ${item}
        </foreach>
        from perms_role_resource
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
        group by
        <foreach collection="groupByFields" item="item" index="index" separator="," >
            ${item}
        </foreach>
    </select>


    <update id="updateByExampleSelective" parameterType="map" >
        update perms_role_resource
        <set >
        <if test="record.id != null" >
            id = #{record.id,jdbcType=INTEGER},
        </if>
        <if test="record.roleId != null" >
            role_id = #{record.roleId,jdbcType=INTEGER},
        </if>
        <if test="record.resourceId != null" >
            resource_id = #{record.resourceId,jdbcType=INTEGER},
        </if>
        <if test="record.updateTime != null" >
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
        </if>
        <if test="record.createTime != null" >
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
        </if>
                </set>
<if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByExample" parameterType="map" >
        update perms_role_resource
        set         id = #{record.id,jdbcType=INTEGER},
                    role_id = #{record.roleId,jdbcType=INTEGER},
                    resource_id = #{record.resourceId,jdbcType=INTEGER},
                    update_time = #{record.updateTime,jdbcType=TIMESTAMP},
                    create_time = #{record.createTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.www.skeleton.repository.po.user.PermsRoleResource" >
        update perms_role_resource
        <set >
                        <if test="roleId != null" >
                role_id = #{roleId,jdbcType=INTEGER},
              </if>             <if test="resourceId != null" >
                resource_id = #{resourceId,jdbcType=INTEGER},
              </if>             <if test="updateTime != null" >
                update_time = #{updateTime,jdbcType=TIMESTAMP},
              </if>             <if test="createTime != null" >
                create_time = #{createTime,jdbcType=TIMESTAMP}  </if>     </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.www.skeleton.repository.po.user.PermsRoleResource" >
        update perms_role_resource
        set
                role_id = #{roleId,jdbcType=INTEGER},
                resource_id = #{resourceId,jdbcType=INTEGER},
                update_time = #{updateTime,jdbcType=TIMESTAMP},
                create_time = #{createTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>